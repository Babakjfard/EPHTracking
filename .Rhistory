library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidyr)
# vvv Functions =====================================================================
#
addCategory <- function(WQS, standards) {
#' Add Category to WQS dataframe based on standards
#'
#' This function merges the summarized WQS dataframe with the Analyte standards.
#' and adds a Category column to the merged dataframe. The Category is determined by
#' comparing Concentration with LDL and MCL values from the standards.
#'
#' @param WQS The input dataframe containing AnalyteCode and Concentration columns.
#' @param standards The standards table containing AnalyteCode, LDL, and MCL columns.
#'
#' @return The merged dataframe with an additional Category column.
#' @import dplyr
merged <- merge(WQS, standards, by = "AnalyteCode", all.x = TRUE)
merged$Category <- ifelse(merged$Concentration < merged$LDL, "No_detect",
ifelse(merged$Concentration <= merged$MCL, "below_MCL", "above_MCL"))
return(merged)
}
plot_timeseries_barplot <- function(data) {
#' Plot Timeseries Barplot
#'
#' This function generates a timeseries bar plot that shows each percentage of the contaminant.
#'
#' @param data The dataframe containing the required columns.
#'             The dataframe must contain columns 'above_MCL', 'below_MCL', 'No_detect' with this
#'             same naming and order.
#'             The dataframe is usually the output of addCategory() function
#'
#' @return A bar plot visualizing the timeseries data.
#'
#' @import ggplot2
#' @import tidyr
#' @importFrom dplyr gather
#' @importFrom ggplot2 ggplot, geom_bar, labs, theme_minimal, facet_grid
#'
#' @export
# Reshape the data to long format
data_long <- gather(data, key = Category, value = Percentage, above_MCL:No_detect)
# Create the bar plot
ggplot(data_long, aes(x = SummaryTimePeriod, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
facet_grid(AnalyteCode ~ AggregationType, scales = "free_y", space = "free") +
labs(x = "Year", y = "Percentage", fill = "Category") +
theme_minimal()
}
WQS_file <- 'Data/Water_Data/Summaries_Calculated_20230505.csv'                    # the address of the Water quality summarized file
PWS_file <- 'Data/Water_Data/PWSInventory.csv'                                     # the address of the Water Systems information file
analytes_standards <- 'numbers/analytes_2023.csv'                                  # the address of the csv file containing standards for the analytes
output_PWS_percentage <- 'Data/Water_Data/NCDM_state_level_2.csv'                    # the address of the output csv file for percent of CWS by category
output_population_affected <- 'Data/Water_Data/NCDM_state_level_population.csv'    # the address of the output csv file for affected population by category
WQS <- read_csv(WQS_file)
WQS <- read_csv(WQS_file)
PWS <- read_csv(PWS_file)
analytes <- read_csv(analytes_standards)
# Converting MCL for Uranium from pci/l to ug/L (Because it was what supposed to
# do during data preparation)
analytes[analytes['AnalyteCode']==4010, 'MCL'] <- analytes[analytes['AnalyteCode']==4010, 'MCL'] * 1.49
analytes[analytes['AnalyteCode']==4010, 'LDL'] <- analytes[analytes['AnalyteCode']==4010, 'LDL'] * 1.49
# Categorizing each concentration values based on the suggested LDL and MCL from CDC Tracking
categorized_WQS <- addCategory(WQS, analytes)
# ========== Part 2: Calculating the affected populations served by CWS in each of the three categories for each analyte
# Calculating the percentage of population in each category
categorized_WQS_with_population <- categorized_WQS %>% filter(Year %in% unique(PWS$YearAssociatedTo))
setwd('~/projects/EPHTracking')
WQS_file <- 'Data/Water_Data/Summaries_Calculated_20230505.csv'                    # the address of the Water quality summarized file
PWS_file <- 'Data/Water_Data/PWSInventory.csv'                                     # the address of the Water Systems information file
analytes_standards <- 'numbers/analytes_2023.csv'                                  # the address of the csv file containing standards for the analytes
output_PWS_percentage <- 'Data/Water_Data/NCDM_state_level_2.csv'                    # the address of the output csv file for percent of CWS by category
output_population_affected <- 'Data/Water_Data/NCDM_state_level_population.csv'    # the address of the output csv file for affected population by category
WQS <- read_csv(WQS_file)
PWS <- read_csv(PWS_file)
analytes <- read_csv(analytes_standards)
# Converting MCL for Uranium from pci/l to ug/L (Because it was what supposed to
# do during data preparation)
analytes[analytes['AnalyteCode']==4010, 'MCL'] <- analytes[analytes['AnalyteCode']==4010, 'MCL'] * 1.49
analytes[analytes['AnalyteCode']==4010, 'LDL'] <- analytes[analytes['AnalyteCode']==4010, 'LDL'] * 1.49
# Categorizing each concentration values based on the suggested LDL and MCL from CDC Tracking
categorized_WQS <- addCategory(WQS, analytes)
# ========== Part 2: Calculating the affected populations served by CWS in each of the three categories for each analyte
# Calculating the percentage of population in each category
categorized_WQS_with_population <- categorized_WQS %>% filter(Year %in% unique(PWS$YearAssociatedTo))
if (nrow(categorized_WQS_with_population) >0){
PWS_merge <- PWS %>% select(c(PWSIDNumber, YearAssociatedTo, SystemPopulation))%>%
rename(Year=YearAssociatedTo)
# TODO : Finish the code for the population proportions for the case that there are enough CWS data.
merged_category_population <- merge(categorized_WQS_with_population, PWS_merge, by = c("PWSIDNumber", "Year"), all.x = TRUE)
annual_category_population <- merged_category_population %>%
group_by(AnalyteCode, SummaryTimePeriod, AggregationType, Category) %>%
summarise(Total= sum(SystemPopulation)) %>%
pivot_wider(names_from = Category, values_from = Total, values_fill = 0) %>%
mutate(Total = above_MCL+ below_MCL + No_detect) %>%
mutate(across(c(above_MCL, below_MCL, No_detect), ~ round(. *100/ Total, 2)))
write_csv(annual_category_population, output_population_affected)
} else {
cat("  *** Can't estimate population affected by each category *** \nReason: There is no CWS population information for the years that sampling results are available ****")
}
unique(categorized_WQS$Year)
unique(categorized_WQS$Year) %>% arrange()
sort(unique(categorized_WQS$Year))
View(categorized_WQS)
unique(PWS$YearAssociatedTo)
PWS$YearAssociatedTo <- 2021
unique(PWS$YearAssociatedTo)
# ========== Part 2: Calculating the affected populations served by CWS in each of the three categories for each analyte
# Calculating the percentage of population in each category
categorized_WQS_with_population <- categorized_WQS %>% filter(Year %in% unique(PWS$YearAssociatedTo))
View(categorized_WQS_with_population)
PWS_merge <- PWS %>% select(c(PWSIDNumber, YearAssociatedTo, SystemPopulation))%>%
rename(Year=YearAssociatedTo)
# TODO : Finish the code for the population proportions for the case that there are enough CWS data.
merged_category_population <- merge(categorized_WQS_with_population, PWS_merge, by = c("PWSIDNumber", "Year"), all.x = TRUE)
annual_category_population <- merged_category_population %>%
group_by(AnalyteCode, SummaryTimePeriod, AggregationType, Category) %>%
summarise(Total= sum(SystemPopulation)) %>%
pivot_wider(names_from = Category, values_from = Total, values_fill = 0) %>%
mutate(Total = above_MCL+ below_MCL + No_detect) %>%
mutate(across(c(above_MCL, below_MCL, No_detect), ~ round(. *100/ Total, 2)))
View(annual_category_population)
if (nrow(categorized_WQS_with_population) >0){
PWS_merge <- PWS %>% select(c(PWSIDNumber, YearAssociatedTo, SystemPopulation))%>%
rename(Year=YearAssociatedTo)
# TODO : Finish the code for the population proportions for the case that there are enough CWS data.
merged_category_population <- merge(categorized_WQS_with_population, PWS_merge, by = c("PWSIDNumber", "Year"), all.x = TRUE)
annual_category_population <- merged_category_population %>%
group_by(AnalyteCode, SummaryTimePeriod, AggregationType, Category) %>%
summarise(Total= sum(SystemPopulation)) %>%
pivot_wider(names_from = Category, values_from = Total, values_fill = 0) %>%
mutate(Total = above_MCL+ below_MCL + No_detect) %>%
mutate(across(c(above_MCL, below_MCL, No_detect), ~ round(. *100/ Total, 2)))
write_csv(annual_category_population, output_population_affected)
} else {
cat("  *** Can't estimate population affected by each category *** \nReason: There is no CWS population information for the years that sampling results are available ****")
}
population_plot <- plot_timeseries_barplot(annual_category_population) # For better result separate the dataset and show in different plots
population_plot
plot_1 <- annual_category_population %>% filter(AggregationType=="MX")
plot_timeseries_barplot(plot_1)
ggplot(annual_category_population, aes(x = analytes, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
facet_grid(AnalyteCode ~ AggregationType, scales = "free_y", space = "free") +
labs(x = "Year", y = "Percentage", fill = "Category") +
theme_minimal()
annual_category_population
plot_1
data <- plot_1
#'
#' @return A bar plot visualizing the timeseries data.
#'
#' @import ggplot2
#' @import tidyr
#' @importFrom dplyr gather
#' @importFrom ggplot2 ggplot, geom_bar, labs, theme_minimal, facet_grid
#'
#' @export
# Reshape the data to long format
data_long <- gather(data, key = Category, value = Percentage, above_MCL:No_detect)
ggplot(data_long, aes(x = analytes, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
facet_grid(AnalyteCode ~ AggregationType, scales = "free_y", space = "free") +
labs(x = "Year", y = "Percentage", fill = "Category") +
theme_minimal()
data_long
ggplot(data_long, aes(x = AnalyteCode, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
facet_grid(AnalyteCode ~ AggregationType, scales = "free_y", space = "free") +
labs(x = "Year", y = "Percentage", fill = "Category") +
theme_minimal()
ggplot(data_long, aes(x = AnalyteCode, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Year", y = "Percentage", fill = "Category") +
theme_minimal()
data_long
data_long$AnalyteCode <- as.factor(data_long$AnalyteCode)
ggplot(data_long, aes(x = AnalyteCode, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Year", y = "Percentage", fill = "Category") +
theme_minimal()
ggplot(data_long, aes(x = AnalyteCode, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Analyte Code", y = "Percentage", fill = "Category") +
theme_minimal()
ggplot(data_long, aes(x = AnalyteCode, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Analyte Code", y = "Percente Population", fill = "Category") +
theme_minimal()
plot_1 <- annual_category_population %>% filter(AggregationType=="X", str_length(SummaryTimePeriod)==4)
data <- annual_category_population %>% filter(AggregationType=="X", str_length(SummaryTimePeriod)==4)
ggplot(data_long, aes(x = AnalyteCode, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Analyte Code", y = "Percente Population", fill = "Category") +
theme_minimal()
plot_1 <- annual_category_population %>% filter(AggregationType=="MX")
plot_1 <- annual_category_population %>% filter(AggregationType;l;lk;lk;lk=="X", str_length(SummaryTimePeriod)==4)
data <- annual_category_population %>% filter(AggregationType=="X", str_length(SummaryTimePeriod)==6)
plot_timeseries_barplot(data = data)
